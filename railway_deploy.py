#!/usr/bin/env python3
"""
RENDER DEPLOYMENT - –ê–î–ú–ò–ù–°–ö–ê–Ø –í–ï–†–°–ò–Ø
–†–∞–±–æ—Ç–∞–µ—Ç –±–µ–∑ Replit, 24/7, —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –õ–°
–û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò –ú–ê–†–®–†–£–¢–û–í + –ü–û–î–î–ï–†–ñ–ö–ê -DAN/-GA
"""
import os
import sys
import time
import signal
import logging
import threading
import re
from datetime import datetime
from flask import Flask
import requests

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
BOT_TOKEN = os.environ.get('TELEGRAM_BOT_TOKEN')
MAIN_GROUP_ID = -1002259378109
ADMIN_USER_ID = 8101326669
API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"

# –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –ë–ê–ó–ê –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ò–• –ù–ê–ó–í–ê–ù–ò–ô (—Ç—Ä–∏–ª–∏–Ω–≥–≤–∞–ª—å–Ω–∞—è) —Å -DAN/-GA
REGION_KEYWORDS = {
    # –ê–ù–î–ò–ñ–ê–ù
    'andijon': {
        'topic_id': 101387,
        'keywords': [
            'andijon', 'andijan', 'andijondan', 'andijonega', 'asaka', 'asakadan', 'asakaga', 'baliqchi', 'boz', 'buloqboshi', 'izboskan', 
            'jalaquduq', 'marhamat', 'oltinko\'l', 'oltinkol', 'paxtaobod', 'qo\'rg\'ontepa',
            'qorgontepa', 'shahrixon', 'ulug\'nor', 'ulugnor', 'xo\'jaobod', 'xojaobod',
            '–∞–Ω–¥–∏–∂–æ–Ω', '–∞—Å–∞–∫–∞', '–±–∞–ª–∏“õ—á–∏', '–±–æ–∑', '–±—É–ª–æ“õ–±–æ—à–∏', '–∏–∑–±–æ—Å–∫–∞–Ω', '–∂–∞–ª–∞“õ—É–¥—É“õ',
            '–º–∞—Ä“≥–∞–º–∞—Ç', '–æ–ª—Ç–∏–Ω–∫—û–ª', '–ø–∞—Ö—Ç–∞–æ–±–æ–¥', '“õ—û—Ä“ì–æ–Ω—Ç–µ–ø–∞', '—à–∞“≥—Ä–∏—Ö–æ–Ω', '—É–ª—É“ì–Ω–æ—Ä', '—Ö—û–∂–∞–æ–±–æ–¥',
            '–∞–Ω–¥–∏–∂–∞–Ω', '–∞—Å–∞–∫–∞', '–±–∞–ª—ã–∫—á–∏', '–∏–∑–±–∞—Å–∫–∞–Ω', '–º–∞—Ä—Ö–∞–º–∞—Ç', '–ø–∞—Ö—Ç–∞–∞–±–∞–¥', '—à–∞—Ö—Ä–∏—Ö–∞–Ω'
        ]
    },
    
    'buxoro': {
        'topic_id': 101372,
        'keywords': [
            'buxoro', 'bukhara', 'buxorodan', 'buxoroga', 'bukharadan', 'bukharaga', 'alat', 'g\'ijduvon', 'gijduvon', 'jondor', 'kogon', 'qorako\'l',
            'qarakol', 'qorovulbozor', 'romitan', 'shofirkon', 'vobkent', 'peshku',
            '–±—É—Ö–æ—Ä–æ', '–∞–ª–∞—Ç', '“ì–∏–∂–¥—É–≤–æ–Ω', '–∂–æ–Ω–¥–æ—Ä', '–∫–æ–≥–æ–Ω', '“õ–æ—Ä–∞–∫—û–ª', '“õ–æ—Ä–æ–≤—É–ª–±–æ–∑–æ—Ä',
            '—Ä–æ–º–∏—Ç–∞–Ω', '—à–æ—Ñ–∏—Ä–∫–æ–Ω', '–≤–æ–±–∫–µ–Ω—Ç', '–ø–µ—à–∫—É',
            '–±—É—Ö–∞—Ä–∞', '–∞–ª–∞—Ç', '–≥–∏–∂–¥—É–≤–∞–Ω', '–∫–∞–≥–∞–Ω', '–∫–∞—Ä–∞–∫—É–ª—å', '—Ä–æ–º–∏—Ç–∞–Ω', '—à–∞—Ñ–∏—Ä–∫–∞–Ω', '–≤–∞–±–∫–µ–Ω—Ç'
        ]
    },
    
    'fargona': {
        'topic_id': 101382,
        'keywords': [
            'farg\'ona', 'fargona', 'fergana', 'fargonodan', 'fargonega', 'farganaga', '—Ñ–∞—Ä–≥–æ–Ω–∞–≥–∞', '—Ñ–µ—Ä–≥–æ–Ω–∞–≥–∞', 'beshariq', 'bog\'dod', 'bogdod', 'buvayda',
            'dang\'ara', 'dangara', 'farg\'ona', 'furqat', 'oltiariq', 'qo\'shtepa', 'qoshtepa',
            'quva', 'rishton', 'so\'x', 'sox', 'toshloq', 'uchko\'prik', 'uchkoprik', 'uzbekiston',
            'yozyovon', 'qo\'qon', 'qoqon', 'quqon', 'kokand',
            '—Ñ–∞—Ä“ì–æ–Ω–∞', '–±–µ—à–∞—Ä–∏“õ', '–±–æ“ì–¥–æ–¥', '–±—É–≤–∞–π–¥–∞', '–¥–∞–Ω“ì–∞—Ä–∞', '—Ñ—É—Ä“õ–∞—Ç', '–æ–ª—Ç–∏–∞—Ä–∏“õ',
            '“õ—û—à—Ç–µ–ø–∞', '“õ—É–≤–∞', '—Ä–∏—à—Ç–æ–Ω', '—Å—û—Ö', '—Ç–æ—à–ª–æ“õ', '—É—á–∫—û–ø—Ä–∏–∫', '—ë–∑—ë–≤–æ–Ω', '“õ—û“õ–æ–Ω',
            '—Ñ–µ—Ä–≥–∞–Ω–∞', '–±–µ—à–∞—Ä—ã–∫', '–±–∞–≥–¥–∞–¥', '–±—É–≤–∞–π–¥–∞', '–¥–∞–Ω–≥–∞—Ä–∞', '—Ñ—É—Ä–∫–∞—Ç', '–∞–ª—Ç—ã–∞—Ä—ã–∫',
            '–∫—É—à—Ç–µ–ø–∞', '–∫—É–≤–∞', '—Ä–∏—à—Ç–∞–Ω', '—Å–æ—Ö', '—Ç–∞—à–ª–∞–∫', '—É—á–∫—É–ø—Ä–∏–∫', '—è–∑—ä—è–≤–∞–Ω', '–∫–æ–∫–∞–Ω–¥'
        ]
    },
    
    'toshkent': {
        'topic_id': 101362,
        'keywords': [
            'toshkent', 'tashkent', 'toshkentdan', 'toshkentga', 'tashkentdan', 'tashkentga', 'bekobod', 'bo\'stonliq', 'bostonliq', 'bo\'ka', 'boka',
            'chinoz', 'qibray', 'oqqo\'rg\'on', 'oqqorgon', 'olmaliq', 'ohangaron', 'parkent',
            'piskent', 'quyi chirchiq', 'yuqori chirchiq', 'yangiyul', 'yangiyo\'l', 'zangota',
            'g\'azalkent', 'gazalkent',
            '—Ç–æ—à–∫–µ–Ω—Ç', '–±–µ–∫–æ–±–æ–¥', '–±—û—Å—Ç–æ–Ω–ª–∏“õ', '–±—û–∫–∞', '—á–∏–Ω–æ–∑', '“õ–∏–±—Ä–∞–π', '–æ“õ“õ—û—Ä“ì–æ–Ω',
            '–æ–ª–º–∞–ª–∏“õ', '–æ“≥–∞–Ω–≥–∞—Ä–æ–Ω', '–ø–∞—Ä–∫–µ–Ω—Ç', '–ø–∏—Å–∫–µ–Ω—Ç', '“õ—É–π–∏ —á–∏—Ä—á–∏“õ', '—é“õ–æ—Ä–∏ —á–∏—Ä—á–∏“õ',
            '—è–Ω–≥–∏—é–ª', '–∑–∞–Ω–≥–æ—Ç–∞', '“ì–∞–∑–∞–ª–∫–µ–Ω—Ç',
            '—Ç–∞—à–∫–µ–Ω—Ç', '–±–µ–∫–∞–±–∞–¥', '–±—É—Å—Ç–∞–Ω–ª—ã–∫', '–±—É–∫–∞', '—á–∏–Ω–∞–∑', '–∫–∏–±—Ä–∞–π', '–∞–∫–∫—É—Ä–≥–∞–Ω',
            '–∞–ª–º–∞–ª—ã–∫', '–∞—Ö–∞–Ω–≥–∞—Ä–∞–Ω', '–ø–∞—Ä–∫–µ–Ω—Ç', '–ø—Å–∫–µ–Ω—Ç', '–∫—É–π–∏ —á–∏—Ä—á–∏–∫', '—é–∫–æ—Ä–∏ —á–∏—Ä—á–∏–∫',
            '—è–Ω–≥–∏—é–ª—å', '–∑–∞–Ω–≥–∞—Ç–∞', '–≥–∞–∑–∞–ª–∫–µ–Ω—Ç'
        ]
    },
    
    'xalqaro': {
        'topic_id': 101367,
        'keywords': [
            'russia', 'rossiya', 'moskva', 'moskvadan', 'moskvaga', 'spb', 'piter', 'kazan', 'novosibirsk', 'ufa', 'astana',
            'almaty', 'bishkek', 'dushanbe', 'tehran', 'istanbul', 'ankara', 'baku', 'tbilisi',
            'kiyev', 'minsk', 'riga', 'tallin', 'vilnyus', 'prayga', 'berlin', 'parej', 'london',
            'xitoy', 'china', 'urumchi', 'beijing', 'eron', 'iran', 'afg\'oniston', 'afganistan',
            'pokiston', 'pakistan', 'hindiston', 'india', 'turkiya', 'turkey', 'germaniya', 'germany',
            '—Ä–æ—Å—Å–∏—è', '–º–æ—Å–∫–≤–∞', '“õ–æ–∑–æ–Ω', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '—É—Ñ–∞', '–∞—Å—Ç–∞–Ω–∞', '–∞–ª–º–∞–æ—Ç–∞', '–±–∏—à–∫–µ–∫',
            '–¥—É—à–∞–Ω–±–µ', '—Ç–µ“≥—Ä–æ–Ω', '–∏—Å—Ç–∞–Ω–±—É–ª', '–∞–Ω“õ–∞—Ä–∞', '–±–æ–∫—É', '—Ç–±–∏–ª–∏—Å–∏', '–∫–∏–µ–≤', '–º–∏–Ω—Å–∫',
            '—Ö–∏—Ç–æ–π', '—É—Ä—É–º—á–∏', '–ø–µ–∫–∏–Ω', '—ç—Ä–æ–Ω', '–∞—Ñ“ì–æ–Ω–∏—Å—Ç–æ–Ω', '–ø–æ–∫–∏—Å—Ç–æ–Ω', '“≥–∏–Ω–¥–∏—Å—Ç–æ–Ω', '—Ç—É—Ä–∫–∏—è',
            '–≥–µ—Ä–º–∞–Ω–∏—è',
            '—Ä–æ—Å—Å–∏—è', '–º–æ—Å–∫–≤–∞', '–º–∞—Å–∫–≤–∞', '–º–∞—Å–∫–∞–≤–¥–∞–Ω', '–º–∞—Å–∫–≤–∞–¥–∞–Ω', '–º–æ—Å–∫–≤–∞–¥–∞–Ω', '–º–æ—Å–∫–≤–∞–≥–∞', '—Å–ø–±', '–ø–∏—Ç–µ—Ä', '–∫–∞–∑–∞–Ω—å', '–Ω–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫', '—É—Ñ–∞', '–∞—Å—Ç–∞–Ω–∞',
            '–∞–ª–º–∞—Ç—ã', '–±–∏—à–∫–µ–∫', '–¥—É—à–∞–Ω–±–µ', '—Ç–µ–≥–µ—Ä–∞–Ω', '—Å—Ç–∞–º–±—É–ª', '–∞–Ω–∫–∞—Ä–∞', '–±–∞–∫—É', '—Ç–±–∏–ª–∏—Å–∏',
            '–∫–∏–µ–≤', '–º–∏–Ω—Å–∫', '—Ä–∏–≥–∞', '—Ç–∞–ª–ª–∏–Ω', '–≤–∏–ª—å–Ω—é—Å', '–ø—Ä–∞–≥–∞', '–±–µ—Ä–ª–∏–Ω', '–ø–∞—Ä–∏–∂', '–ª–æ–Ω–¥–æ–Ω',
            '–∫–∏—Ç–∞–π', '—É—Ä—É–º—á–∏', '–ø–µ–∫–∏–Ω', '–∏—Ä–∞–Ω', '–∞—Ñ–≥–∞–Ω–∏—Å—Ç–∞–Ω', '–ø–∞–∫–∏—Å—Ç–∞–Ω', '–∏–Ω–¥–∏—è', '—Ç—É—Ä—Ü–∏—è', '–≥–µ—Ä–º–∞–Ω–∏—è',
            '–ø–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫', '—É–ª—å—è–Ω–æ–≤—Å–∫', '–∞—Ä—ã—Å—å'
        ]
    }
}

# –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–≥–∏–æ–Ω—ã (—Å–æ–∫—Ä–∞—â–µ–Ω–Ω—ã–µ –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ—Å—Ç–∏)
REGION_KEYWORDS.update({
    'namangan': {'topic_id': 101377, 'keywords': ['namangan', '–Ω–∞–º–∞–Ω–≥–∞–Ω', 'pop', 'uchqurgan', 'yangiqorgon', 'chortoq']},
    'samarqand': {'topic_id': 101357, 'keywords': ['samarqand', '—Å–∞–º–∞—Ä–∫–∞–Ω–¥', 'kattaqorgon', 'jomboy', 'urgut', 'payariq']},
    'qashqadaryo': {'topic_id': 101352, 'keywords': ['qarshi', '–∫–∞—Ä—à–∏', 'muborak', 'shakhrisabz', 'kitob', 'koson']},
    'surxondaryo': {'topic_id': 101347, 'keywords': ['termiz', '—Ç–µ—Ä–º–µ–∑', 'denov', 'boysun', 'qumqorgon', 'sherobod']},
    'jizzax': {'topic_id': 101342, 'keywords': ['jizzax', '–¥–∂–∏–∑–∞–∫', 'gallaorol', 'zafarobod', 'pakhtakor', 'mirzachol']},
    'sirdaryo': {'topic_id': 101337, 'keywords': ['guliston', '–≥—É–ª–∏—Å—Ç–∞–Ω', 'shirin', 'boyovut', 'sayxunobod', 'syrdariya']},
    'xorazm': {'topic_id': 101332, 'keywords': ['urgench', '—É—Ä–≥–µ–Ω—á', 'xiva', 'khiva', 'shovot', 'qoshkopir']},
    'qoraqalpoq': {'topic_id': 101327, 'keywords': ['nukus', '–Ω—É–∫—É—Å', 'taqiyotas', 'chimbay', 'kegeyli', 'amudaryo']}
})

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(message)s')
logger = logging.getLogger(__name__)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
message_count = 0
last_update_id = 0
bot_start_time = datetime.now()
bot_status = "–ê–ö–¢–ò–í–ï–ù"

def send_message(chat_id, text, message_thread_id=None):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    global message_count
    try:
        data = {'chat_id': chat_id, 'text': text}
        if message_thread_id:
            data['message_thread_id'] = message_thread_id
            
        response = requests.post(f"{API_URL}/sendMessage", json=data, timeout=10)
        success = response.json().get('ok', False)
        
        if success:
            message_count += 1
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_count} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        
        return success
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
        return False

def handle_admin_command(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –õ–°"""
    try:
        text = message.get('text', '').lower()
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –∞–¥–º–∏–Ω
        if user_id != ADMIN_USER_ID:
            return
        
        if text == '/start' or text == '—Å—Ç–∞—Ä—Ç':
            uptime = datetime.now() - bot_start_time
            hours = int(uptime.total_seconds() // 3600)
            minutes = int((uptime.total_seconds() % 3600) // 60)
            
            stats = f"""ü§ñ YUKMARKAZI BOT - –°–¢–ê–¢–£–°

üü¢ –°—Ç–∞—Ç—É—Å: {bot_status}
üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {message_count} —Å–æ–æ–±—â–µ–Ω–∏–π
‚è∞ –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º
üìã –†–µ–≥–∏–æ–Ω–æ–≤: {len(REGION_KEYWORDS)}
üìç –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {sum(len(data['keywords']) for data in REGION_KEYWORDS.values())}
üîÑ –ü–æ—Å–ª–µ–¥–Ω–∏–π update: {last_update_id}
üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: XALQARO (101367)
üöÄ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: Render.com

–ö–û–ú–ê–ù–î–´:
/status - —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞  
/restart - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ (—Ç–æ–ª—å–∫–æ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª–µ)
/stats - –ø–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"""
            
            send_message(chat_id, stats)
            
        elif text == '/status' or text == '—Å—Ç–∞—Ç—É—Å':
            status_msg = f"üü¢ –ë–û–¢ {bot_status}\nüìä –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}\nüîÑ Update: {last_update_id}\n‚è∞ –†–∞–±–æ—Ç–∞–µ—Ç: {int((datetime.now() - bot_start_time).total_seconds() // 60)}–º"
            send_message(chat_id, status_msg)
            
        elif text == '/stats' or text == '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞':
            region_stats = ""
            for region, data in REGION_KEYWORDS.items():
                region_stats += f"‚Ä¢ {region.upper()}: {data['topic_id']} ({len(data['keywords'])} —Å–ª–æ–≤)\n"
            
            stats_msg = f"""üìä –î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê

{region_stats}
üí¨ –í—Å–µ–≥–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {message_count}
üïí –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {datetime.now() - bot_start_time}
üåê –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —è–∑—ã–∫–∏: RU, UZ-Latin, UZ-Cyrillic
üîß –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–∏—Å—Ç–∞–≤–æ–∫: -DAN/-GA"""
            
            send_message(chat_id, stats_msg)
            
        elif text in ['/restart', '—Ä–µ—Å—Ç–∞—Ä—Ç', '–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫']:
            send_message(chat_id, "üîÑ –†–ï–°–¢–ê–†–¢ –ë–û–¢–ê\n\n–†–µ—Å—Ç–∞—Ä—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ Render –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–æ–¥–∞.\n–î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞–Ω–µ–ª—å Render.")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∞–¥–º–∏–Ω—Å–∫–æ–π –∫–æ–º–∞–Ω–¥—ã: {e}")

def extract_phone_number(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_pattern = r'[\+]?[0-9]{1,4}[-\s]?[0-9]{2,3}[-\s]?[0-9]{3}[-\s]?[0-9]{2,4}[-\s]?[0-9]{2,4}'
    match = re.search(phone_pattern, text)
    return match.group() if match else "Telefon ko'rsatilmagan"

def extract_route_and_cargo(text):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–∑–µ"""
    route_pattern = r'([–ê-–Ø–Å–∞-—è—ë\w\'\-]+)[\s\-‚Üí‚Äì]+([–ê-–Ø–Å–∞-—è—ë\w\'\-]+)'
    route_match = re.search(route_pattern, text.upper())
    
    if route_match:
        from_city = route_match.group(1).lower()
        to_city = route_match.group(2).lower()
        cargo_text = text.replace(route_match.group(0), '').strip()
        return from_city, to_city, cargo_text
    
    return None, None, text

def format_cargo_text(cargo_text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –≥—Ä—É–∑–∞"""
    lines = [line.strip() for line in cargo_text.split('\n') if line.strip()]
    
    transport_type = "Transport"
    cargo_description = ""
    
    if lines:
        first_line = lines[0]
        if any(word in first_line.upper() for word in ['ISUZU', 'KAMAZ', 'GAZEL', 'TRUCK']):
            transport_type = first_line.title()
            cargo_description = ' '.join(lines[1:]) if len(lines) > 1 else ""
        else:
            cargo_description = ' '.join(lines)
    
    return transport_type, cargo_description

def process_message(message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        if not message.get('text'):
            return
            
        text = message['text']
        chat_id = message['chat']['id']
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥–º–∏–Ω—Å–∫–∏—Ö –∫–æ–º–∞–Ω–¥ –≤ –õ–°
        if chat_id == ADMIN_USER_ID:
            handle_admin_command(message)
            return
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø—ã
        if chat_id != MAIN_GROUP_ID:
            return
        
        # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∞
        from_city, to_city, cargo_text = extract_route_and_cargo(text)
        if not from_city or not to_city:
            return
            
        # –ü–æ–∏—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞ –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º
        def find_region_by_text(text):
            text_lower = text.lower()
            words = re.findall(r'\b\w+\b', text_lower)
            
            for region_key, region_data in REGION_KEYWORDS.items():
                for keyword in region_data['keywords']:
                    if keyword.lower() in words or keyword.lower() in text_lower:
                        return region_key
            return None
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        from_city_region = find_region_by_text(from_city)
        to_city_region = find_region_by_text(to_city)
        
        topic_keyword = None
        
        # –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤
        if from_city_region == 'xalqaro' or to_city_region == 'xalqaro':
            topic_keyword = 'xalqaro'
        elif from_city_region:
            topic_keyword = from_city_region
        elif to_city_region:
            topic_keyword = to_city_region
        else:
            topic_keyword = find_region_by_text(text)
                    
        if not topic_keyword:
            return
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        sender_name = message.get('from', {}).get('first_name', 'Anonim')
        sender_username = message.get('from', {}).get('username')
        sender_link = f"https://t.me/{sender_username}" if sender_username else sender_name
        
        phone = extract_phone_number(text)
        transport_type, cargo_description = format_cargo_text(cargo_text)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        formatted_text = f"""{from_city.upper()} - {to_city.upper()}

üöõ {transport_type}

üí¨ {cargo_description}

‚òéÔ∏è {phone}

üë§ {sender_link}

#{to_city.upper()}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
Boshqa yuklar: @logistika_marka"""

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ —Ç–æ–ø–∏–∫
        topic_id = REGION_KEYWORDS[topic_keyword]['topic_id']
        success = send_message(MAIN_GROUP_ID, formatted_text, topic_id)
        
        if success:
            logger.info(f"üéØ {from_city} -> {to_city} ({topic_keyword}): {transport_type}")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")

def get_updates():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram"""
    global last_update_id
    try:
        params = {
            'offset': last_update_id + 1,
            'timeout': 30,
            'allowed_updates': ['message']
        }
        
        response = requests.get(f"{API_URL}/getUpdates", params=params, timeout=35)
        
        if response.status_code == 200:
            data = response.json()
            if data.get('ok'):
                return data.get('result', [])
        return []
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è: {e}")
        return []

def bot_main_loop():
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞"""
    global last_update_id, bot_status
    
    logger.info("üöÄ RENDER BOT –ó–ê–ü–£–©–ï–ù –° –ê–î–ú–ò–ù–°–ö–ò–ú–ò –ö–û–ú–ê–ù–î–ê–ú–ò")
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    send_message(ADMIN_USER_ID, "üöÄ RENDER BOT –ó–ê–ü–£–©–ï–ù\n\n‚úÖ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∑–±–µ–∫—Å–∫–∏—Ö –ø—Ä–∏—Å—Ç–∞–≤–æ–∫ -DAN/-GA\n‚úÖ –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –≤ –õ–° –∞–∫—Ç–∏–≤–Ω—ã\n\n–ö–æ–º–∞–Ω–¥—ã: /start, /status, /stats, /restart")
    
    while True:
        try:
            updates = get_updates()
            
            for update in updates:
                last_update_id = update['update_id']
                
                if 'message' in update:
                    message = update['message']
                    process_message(message)
                    
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ: {e}")
            bot_status = "–û–®–ò–ë–ö–ê"
            time.sleep(5)
            bot_status = "–ê–ö–¢–ò–í–ï–ù"
            continue
            
        time.sleep(1)

# Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Render
app = Flask(__name__)

@app.route('/')
def home():
    uptime = datetime.now() - bot_start_time
    hours = int(uptime.total_seconds() // 3600)
    minutes = int((uptime.total_seconds() % 3600) // 60)
    
    return f"""
    <h1>YukMarkazi Bot - {bot_status}</h1>
    <p>–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {message_count}</p>
    <p>–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {hours}—á {minutes}–º</p>
    <p>–†–µ–≥–∏–æ–Ω–æ–≤: {len(REGION_KEYWORDS)}</p>
    <p>–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {sum(len(data['keywords']) for data in REGION_KEYWORDS.values())}</p>
    <p>–ü–æ–¥–¥–µ—Ä–∂–∫–∞ —É–∑–±–µ–∫—Å–∫–∏—Ö –ø—Ä–∏—Å—Ç–∞–≤–æ–∫: -DAN/-GA</p>
    <p>–ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã: –ê–ö–¢–ò–í–ù–´</p>
    <p>–ü–æ—Å–ª–µ–¥–Ω–∏–π update: {last_update_id}</p>
    """

@app.route('/health')
def health():
    return {'status': bot_status.lower(), 'messages': message_count, 'uptime': int((datetime.now() - bot_start_time).total_seconds())}

@app.route('/ping')
def ping():
    return 'pong'

def signal_handler(signum, frame):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è graceful shutdown"""
    global bot_status
    bot_status = "–û–°–¢–ê–ù–û–í–õ–ï–ù"
    logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")
    sys.exit(0)

if __name__ == '__main__':
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    bot_thread = threading.Thread(target=bot_main_loop, daemon=True)
    bot_thread.start()
    
    # –ó–∞–ø—É—Å–∫ Flask –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
