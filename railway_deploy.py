#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
railway_deploy.py ‚Äì —É–ª—É—á—à–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
- –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω—É –ø—Ä–∏ –Ω–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω–æ–º –º–∞—Ä—à—Ä—É—Ç–µ
- –∫–Ω–æ–ø–∫–∞ ¬´üë§ Aloqaga_chiqish¬ª —Å @username –∏–ª–∏ –±–µ–∑
- –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è: ƒ∞‚Üíi,  º‚Üí', —Ä–µ–≥–∏—Å—Ç—Ä –Ω–µ –≤–∞–∂–µ–Ω
- –≤—Å–µ —Ä–∞–π–æ–Ω–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã –∏ –∫—Ä—É–ø–Ω—ã–µ –ø–æ—Å—ë–ª–∫–∏ (–ü–∏—à–∞–≥–∞—Ä–¥–∞–Ω, –ß–∏–Ω–∞–∑, ‚Ä¶)
"""
import os
import sys
import time
import signal
import logging
import threading
import re
import unicodedata
import traceback
from datetime import datetime
from flask import Flask, request, jsonify
import requests

# ========== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ==========
BOT_TOKEN     = os.environ.get('TELEGRAM_BOT_TOKEN')
MAIN_GROUP_ID = int(os.environ.get('MAIN_GROUP_ID', '-1002259378109'))
ADMIN_USER_ID = int(os.environ.get('ADMIN_USER_ID', '8101326669'))
BOT_USERNAME  = os.getenv("BOT_USERNAME", "yukmarkazi_bot")  # –±–µ–∑ @
API_URL       = f"https://api.telegram.org/bot{BOT_TOKEN}" if BOT_TOKEN else None
# ========== –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ==========
last_update_id = 0
stop_polling = False
bot_status = "–ê–ö–¢–ò–í–ï–ù"
message_count = 0
bot_start_time = datetime.now()
logger = logging.getLogger(__name__)

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
def init_logging():
    logging.basicConfig(
        level=logging.INFO,
        format='[%(asctime)s] %(levelname)s: %(message)s',
        handlers=[
            logging.FileHandler('bot.log', encoding='utf-8'),
            logging.StreamHandler()
        ]
    )

# ========== REGION_KEYWORDS ==========
REGION_KEYWORDS = {
    'toshkent': {
        'topic_id': 101362,
        'keywords': [
            # —Å—Ç–æ–ª–∏—Ü–∞
            'toshkent', 'tashkent', 'toshkent shahri', 'tashkent city',
            'tosh-kent', 'tash-kent', 'tosh ºkent', 'tash ºkent',
            'toshkent ƒ∞', 'toshkent i', 'TOSHKENT', 'TASHKENT',
            # —Ä–∞–π–æ–Ω—ã –≥–æ—Ä–æ–¥–∞
            'yashnobod', 'yashnobod tumani', 'yunusobod', 'yunusobod tumani',
            'mirzo-ulugbek', 'mirzo ulugbek', 'mirzo-ulugbek tumani',
            'olmazor', 'olmazor tumani', 'uchtepa', 'uchtepa tumani',
            'shayxontoxur', 'shayxontohur', 'shayxontoxur tumani',
            'chilonzor', 'chilon-zor', 'chilonzor tumani',
            'sergeli', 'sergeli tumani', 'yakkasaroy', 'yakkasaroy tumani',
            'mirobod', 'mirabad', 'mirobod tumani', 'bektemir', 'bektemir tumani',
            # –æ–±–ª–∞—Å—Ç–∏ –∏ —Ä–∞–π–æ–Ω—ã –¢–∞—à–∫–µ–Ω—Ç—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏
            'bekobod', 'bekabad', 'bekobod tumani', 'bekabad tumani',
            'olmaliq', 'alma-lyk', 'olmalik', 'olmaliq tumani', 'olmaliq i',
            'ohangaron', 'axangaron', 'ohan ºgaron', 'ohangaron tumani', 'ohangaron i',
            'angren', 'angren ƒ∞', 'angiren', 'angren i',
            'chirchiq', 'chirchik', 'chirchik ƒ∞', 'chir-chiq', 'chirchiq i',
            'yangiyul', "yangiyo'l", 'yangiyul tumani', 'yangiyul i', "yangiyo'l tumani",
            'parkent', 'parkent tumani', 'piskent', 'piskent tumani', 'bekobod', 'bekabad', '–±–µ–∫–∞–±–∞–¥', '–±–µ–∫–æ–±–æ–¥',
            'quyichirchiq', 'quyichirchiq tumani',
            'bo ªka', 'boka', 'bo ªka tumani', 'boka tumani', 'chinaz', 'chinazdan', 'chinaz tumani', 'chinoz', 'chinozdan', '—á–∏–Ω–æ', '—á–∏–Ω–æ–∑', '—á–∏–Ω–æ–∑–¥–∞–Ω',
            'zangiota', 'zangiota tumani',
            'qibray', 'qibray tumani',
            'yuqorichirchiq', 'yuqorichirchiq tumani',
            'nurafshon', 'nurafshon tumani',
            'akhangaran', 'axangaran', 'akhangaran tumani',
            'forish', 'forish tumani', 'ustarkhan', 'ustarkhan tumani',
            'gazalkent', 'gazalkent tumani', 'keles', 'keles tumani',
            'tashkent region', 'toshkent viloyati', 'tashkent oblast'
        ]
    },
    'andijon': {
        'topic_id': 101387,
        'keywords': [
            'andijon', 'andijan', 'andijon ƒ∞', 'andijon º', 'andijon i', "andijon'",
            'andijonga', 'andijon-ga', 'andijon ga',
            'asaka', 'asaka ƒ∞', 'asaka º', 'asaka tumani', 'asaka i', "asaka'",
            'marhamat', 'marxamat', 'marhamat tumani', 'marhamat i',
            'shahrixon', 'shahrixon tumani', 'shaxrixon', 'shahrixon i',
            'xoja-obod', 'xojaobod', 'xoja ºobod', "xoja'obod", "xoja'obod",
            'qorgontepa', 'qurghontepa', 'qurg ªontepa', 'qurghontepa i',
            'oltinkol', 'oltinko ªl', 'oltinkol tumani', 'oltinkol i'
        ]
    },
    'fargona': {
        'topic_id': 101382,
        'keywords': [
            "farg'ona", "farg ªona", 'fargona', 'fergana', 'farg-on-a',
            'fargona ƒ∞', 'fargona i', "farg'ona ƒ∞", "farg ªona ƒ∞",
            'qoqon', 'kokand', 'quqon', 'qo ºqon', 'qoqon ƒ∞', 'qoqon i',
            'margilon', 'margilan', 'margilon ƒ∞', 'margilon i',
            'quvasoy', 'kuvasay', 'quvasoy ƒ∞', 'quvasoy i', 'quvasoy º', 'quvasoy', 'kuvasay', '–∫—É–≤–∞—Å–∞–π', '–∫—É–≤–∞—Å–æ–π', 'quvasoydan', '–∫—É–≤–∞—Å–æ–π–¥–∞–Ω',
            'beshariq', 'besharik', 'beshariq ƒ∞', 'beshariq i',
            "bog'dod", 'bogdod', "bog ªdod", "bog'dod ƒ∞", "bog'dod i",
            'oltiarik', 'oltiarik ƒ∞', 'oltiarik i',
            'rishton', 'rishtan', 'rishton ƒ∞', 'rishton i',
            'sox', 'sox tumani', 'sox ƒ∞', 'sox i'
        ]
    },
    'namangan': {
        'topic_id': 101383,
        'keywords': [
            'namangan', 'namangan ƒ∞', 'namangan º', 'namangan i', "namangan'",
            'chortoq', 'chartak', 'chortoq ƒ∞', 'chortoq i', 'chortoq º',
            'yangiqorgon', 'yangikurgan', 'yangi-qorƒüon', 'yangikurgan i',
            'chust', 'chust tumani', 'chust ƒ∞', 'chust i', 'chust º', "chust'",
            'kosonsoy', 'kosonsoy tumani', 'kosonsoy ƒ∞', 'kosonsoy i',
            'mullomirsoy', 'mullomir ºsoy', "mullomir'soy",
            'uchqorgon', 'uch-qorƒüon', 'uchqo ªrg ªon', 'uchqorgon i',
            'pop', 'pop tumani', 'pop ƒ∞', 'pop i'
        ]
    },
    'buxoro': {
        'topic_id': 101372,
        'keywords': [
            'buxoro', 'bukhara', 'buxara', 'buxoro ƒ∞', 'buxoro º', 'buxoro i', "buxoro'",
            'alat', 'alat tumani', 'alat ƒ∞', 'alat i',
            "g'ijduvon", 'gijduvon', "g ªijduvon", "g'ijduvon ƒ∞", "g'ijduvon i",
            'kogon', 'kogon tumani', 'kogon ƒ∞', 'kogon i',
            'romitan', 'romitan tumani', 'romitan ƒ∞', 'romitan i',
            'shofirkon', 'shofirkon ƒ∞', 'shofirkon tumani', 'shofirkon i',
            'qorako ªl', 'qorakol', 'qorakol ƒ∞', 'qorakol i'
        ]
    },
    'samarqand': {
        'topic_id': 101369,
        'keywords': [
            'samarqand', 'samarkand', 'samarqand ƒ∞', 'samarqand º', 'samarqand i', "samarqand'",
            'urgut', 'urgut tumani', 'urgut ƒ∞', 'urgut i',
            'kattaqorgon', 'kattakurgan', 'katta-qorƒüon', 'kattaqo ªrg ªon', 'kattaqorgon i',
            'payariq', 'payariq tumani', 'payarik', 'payariq i',
            'ishtixon', 'ishtixon tumani', 'ishtixon ƒ∞', 'ishtixon i',
            'jomboy', 'jomboy tumani', 'jomboy ƒ∞', 'jomboy i',
            'nurabod', 'nurabod tumani', 'nurabod i'
        ]
    },
    'qashqadaryo': {
        'topic_id': 101380,
        'keywords': [
            'qarshi', 'karshi', 'qarshi ƒ∞', 'qarshi º', 'qarshi i', "qarshi'",
            'shahrisabz', 'shahrisabz ƒ∞', 'shakhrisabz', 'shahri-sabz', 'shahrisabz i',
            'koson', 'koson tumani', 'koson ƒ∞', 'koson i',
            'guzar', 'guzar tumani', 'guzar ƒ∞', 'guzar i',
            'muborak', 'muborak tumani', 'muborak ƒ∞', 'muborak i',
            'chiroqchi', 'chiroqchi tumani', 'chiroqchi ƒ∞', 'chiroqchi i',
            'yakkabog', 'yakkabog ª', 'yakkabog ƒ∞', 'yakkabog i'
        ]
    },
    'surxondaryo': {
        'topic_id': 101363,
        'keywords': [
            'termiz', 'termez', 'termiz ƒ∞', 'termiz º', 'termiz i', "termiz'",
            'denov', 'denau', 'denov ƒ∞', 'denov º', 'denov i', "denov'",
            'boysun', 'boysun tumani', 'boysun ƒ∞', 'boysun i', 'surxondaryo', '—Å—É—Ä—Ö–æ–Ω–¥–∞—Ä—ë', '—Å—É—Ä—Ö–æ–Ω–¥–∞—Ä—ë–≥–∞', '—Å—É—Ä—Ö–æ–Ω–¥–∞—Ä—å–µ',
            'sherobod', 'sherobod tumani', 'sherobod ƒ∞', 'sherobod i',
            'qumqorgon', 'qumqorƒüon', 'qumqo ªrg ªon', 'qumqorgon i',
            'uzun', 'uzun tumani', 'uzun i'
        ]
    },
    'navoiy': {
        'topic_id': 101379,
        'keywords': [
            'navoiy', 'navoi', 'navoiy ƒ∞', 'navoi ƒ∞', 'navoiy i', 'navoi i',
            'zarafshon', 'zarafshan', 'zarafshon ƒ∞', 'zarafshon i',
            'karmana', 'karmana tumani', 'karmana ƒ∞', 'karmana i',
            'nurota', 'nurota tumani', 'nurota ƒ∞', 'nurota i',
            'konimex', 'konimex tumani', 'konimex ƒ∞', 'konimex i',
            'uchquduq', 'uchquduk', 'uch-quduq', 'uchquduq i'
        ]
    },
    'sirdaryo': {
        'topic_id': 101378,
        'keywords': [
            'guliston', 'gulistan', 'guliston ƒ∞', 'guliston º', 'guliston i', "guliston'",
            'shirin', 'shirin tumani', 'shirin ƒ∞', 'shirin i',
            'boyovut', 'bayaut', 'boyovut tumani', 'boyovut ƒ∞', 'boyovut i',
            'sirdaryo', 'sirdaryo ƒ∞', 'sirdaryo º', 'sirdaryo i', "sirdaryo'",
            'mirzaobod', 'mirzaobod tumani', 'mirzaobod i'
        ]
    },
    'jizzax': {
        'topic_id': 101377,
        'keywords': [
            'jizzax', 'jizzax ƒ∞', 'jizzax i', 'jizzakh', 'jiz-zax', '–∂–∏–∑–∑–∞—Ö', '–¥–∂–∏–∑–∞–∫',
            'gallaaral', 'gallaaral ƒ∞', 'gallaaral i', 'galla-aral', 'gallaa ºral', "galla'aral",
            'pakhtakor', 'pakhtakor ƒ∞', 'pakhtakor i', 'pakhtakor tumani',
            'zomin', 'zomin tumani', 'zomin ƒ∞', 'zomin i',
            'pishagar', 'pishagaron', 'pishagardan', 'pishagar ƒ∞', 'pishagar i', "pishagar'",
            'forish', 'forish tumani', 'forish ƒ∞', 'forish i',
            'arnasoy', 'arnasoy tumani', 'arnasoy ƒ∞', 'arnasoy i',
            'baxmal', 'baxmal tumani', 'baxmal i',
            'pishagardan', '–ø–∏—à–∞–≥–∞—Ä–¥–∞–Ω', 'pishagardan i', 'pishagardan ƒ∞'
        ]
    },
    'xorazm': {
        'topic_id': 101660,
        'keywords': [
            'xorazm', 'xorezm', 'xorazm ƒ∞', 'xorezm ƒ∞', 'xorazm i', 'xorezm i',
            'xiva', 'khiva', 'xiva ƒ∞', 'xiva º', 'xiva i', "xiva'",
            'urganch', 'urgench', 'urganch ƒ∞', 'urganch º', 'urganch i', "urganch'",
            'shovot', 'shavat', 'shovot ƒ∞', 'shovot i', "shovot'", 'shovot º',
            'yangiariq', 'yangiariq tumani', 'yangiariq ƒ∞', 'yangiariq i',
            'bog ªot', 'bogot', 'bog ªot tumani', 'bog ªot ƒ∞', 'bog ªot i',
            'xazarasp', 'hazarasp', 'xazarasp tumani', 'xazarasp i',
            'gurlan', 'gurlan tumani', 'gurlan ƒ∞', 'gurlan i',
            'qoshkopir', 'koshkupir', 'qoshkopir tumani', 'qoshkopir i',
            'tuproqqala', 'tuprak kala', 'tuproqqala tumani', 'tuproqqala i'
        ]
    },
        'urganch': {
        'topic_id': 101375,
        'keywords': [
            # --- –≥–æ—Ä–æ–¥ –£—Ä–≥–µ–Ω—á ---
            'urganch', 'urgench', 'urganch shahri', 'urganch city',
            'urganch ƒ∞', 'urganch i', 'urganch º', "urganch'",
            'urgench', 'urgench shahri', 'urganch tumani', 'urganch tuman',

            # --- —Ä–∞–π–æ–Ω—ã –•–æ—Ä–µ–∑–º—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ ---
            'xiva', 'xiva shahri', 'xiva tumani', 'khiwa', 'khiva',
            'hazarasp', 'xazarasp', 'xazarasp tumani', 'hazarasp tuman',
            'gurlan', 'gurlan tumani', 'gurlan tuman',
            'qoshkopir', 'koshkupir', 'qoshkopir tumani', 'qoshkopir tuman',
            'shovot', 'shavat', 'shovot tumani', 'shovot tuman',
            'yangiariq', 'yangiariq tumani', 'yangi ariq', 'yangiarik',
            'bog ªot', 'bogot', 'bog ªot tumani', 'bogot tuman',
            'tuproqqala', 'tuproq qala', 'tuproqqala tumani', 'tuprak kala',
            'uchquduq', 'uchquduk', 'uchquduq tumani', 'uch quduq',

            # --- –∫—Ä—É–ø–Ω—ã–µ –ø–æ—Å—ë–ª–∫–∏/–º–∞—Ä—à—ã—Ä—É—Ç—ã ---
            'pitnak', 'pitnak shaharcha', 'pitnak posyolok',
            'khanka', 'xanka', 'khanka shaharcha',
            'dashoguz', 'dashoguz yuli', 'urganch-dashoguz',
            'urgench-urgench airport', 'urganch aeroporti', 'urganch airport',
            'urgench-khiva', 'urganch-xiva', 'xiva-urganch',
            'urgench-nukus', 'urganch-nukus', 'nukus-urganch',
            'urgench-tashauz', 'urganch-tashauz',
            'urgench-shovot', 'urganch-shovot',
            'urgench-gurlan', 'urganch-gurlan',

            # --- —Ä–∞–∑–Ω—ã–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç/—ë/e/–∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã/—Ä–µ–≥–∏—Å—Ç—Ä ---
            'URGENCH', 'URGENCH I', 'URGANCH', 'URGANCH I',
            'urganch-shahri', 'urganch-shaharcha', 'urganch-posyolok',
            'urg ªanch', "urg'anch", 'urganch º', 'urganch‚Äô',
            'urgench-shahri', 'urgench-shaharcha', 'urgench-posyolok'
        ]
    },
    'nukus': {
        'topic_id': 101376,
        'keywords': [
            'nukus', 'nukus ƒ∞', 'nukus º', 'nukus i', "nukus'", 'no ªkis', 'nokis',
            'kegeyli', 'kegeyli tumani', 'kegeyli ƒ∞', 'kegeyli i',
            'muynoq', 'muynaq', 'muynoq ƒ∞', 'muynoq i',
            'takhiatash', 'takhiatash tumani', 'takhiatash ƒ∞', 'takhiatash i'
        ]
    },
    'qoraqalpoq': {
        'topic_id': 101381,
        'keywords': [
            'qoraqalpoq', 'qaraqalpaqstan', 'qoraqalpoq ƒ∞', 'qaraqalpaq-stan', 'qoraqalpoq i',
            'qorakalpoq', 'karakalpakstan', 'qorakalpoq ƒ∞', 'qorakalpoq i',
            'turtkul', 'turtkul ƒ∞', 'turtkul º', 'turtkul tumani', 'turtkul i', "turtkul'",
            'khojeli', 'xojeli', 'hodjeyli', 'xojeli ƒ∞', 'xojeli i', 'khojeli º', "xojeli'",
            'amudarya', 'amudaryo', 'amudarya tumani', 'amudarya ƒ∞', 'amudarya i',
            'chimboy', 'chimboy tumani', 'chimboy ƒ∞', 'chimboy i'
        ]
    },
    'fura_bozor': {
        'topic_id': 101361,
        'keywords': [
            'fura bazar', 'fura bozor', 'fura bozori', '—Ñ—É—Ä–∞ –±–æ–∑–æ—Ä', 'bozor fura'
        ]
    },
    'reklama': {
        'topic_id': 101360,
        'keywords': [
            'reklama', 'reklama post', '—Ä–µ–∫–ª–∞–º–∞', 'reklama berish', 'reklama joylashtirish'
        ]
    },
    'yangiliklar': {
        'topic_id': 101359,
        'keywords': [
            'yangilik', 'yangiliklar', '–Ω–æ–≤–æ—Å—Ç–∏', 'news', 'xabar', "so'ngi yangiliklar"
        ]
    },
    'xalqaro': {
        'topic_id': 101367,
        'keywords': [
            # –†–æ—Å—Å–∏—è
            'russia', 'rosiya', 'russia ƒ∞', 'rosiya ƒ∞', 'russia i', 'rosiya i',
            'moskva', 'moscow', 'moskva ƒ∞', 'moskva º', 'moskva i', "moskva'",
            'spb', 'sankt-peterburg', 'piter', 'saint-petersburg', 'spb ƒ∞', 'spb i',
            'krasnodar', 'krasnodar ƒ∞', 'krasnodar i', 'voronej', '–≤–æ—Ä–æ–Ω–µ–∂', 'qazoq', '–∫–∞–∑–∞—Ö—Å—Ç–∞–Ω', 'irkutsk', '–∏—Ä–∫—É—Ç—Å–∫',
            'rostov', 'rostov-na-donu', 'rostov ƒ∞', 'rostov i',
            'volgograd', 'volgograd ƒ∞', 'volgograd i',
            'kazan', 'kazan ƒ∞', 'kazan i',
            'nizhny novgorod', 'nizhniy novgorod', 'nizhny novgorod ƒ∞', 'nizhny i',
            'samara', 'samara ƒ∞', 'samara i',
            'ufa', 'ufa ƒ∞', 'ufa i',
            'perm', 'perm ƒ∞', 'perm i',
            'krasnoyarsk', 'krasnoyarsk ƒ∞', 'krasnoyarsk i',
            'novosibirsk', 'novosibirsk ƒ∞', 'novosibirsk i',
            'yekaterinburg', 'ekaterinburg', 'yekaterinburg ƒ∞', 'yekaterinburg i',
            'chelyabinsk', 'chelyabinsk ƒ∞', 'chelyabinsk i',
            'omsk', 'omsk ƒ∞', 'omsk i',
            'voronezh', 'voronezh ƒ∞', 'voronezh i',
            'sochi', 'sochi ƒ∞', 'sochi i',
            'tolyatti', 'tolyatti ƒ∞', 'tolyatti i',
            'belgorod', 'belgorod ƒ∞', 'belgorod i',
            'tula', 'tula ƒ∞', 'tula i',
            'yaroslavl', 'yaroslavl ƒ∞', 'yaroslavl i',
            'tver', 'tver ƒ∞', 'tver i',
            'ivanovo', 'ivanovo ƒ∞', 'ivanovo i',
            'vladivostok', 'vladivostok ƒ∞', 'vladivostok i',
            'irkutsk', 'irkutsk ƒ∞', 'irkutsk i',
            'khabarovsk', 'khabarovsk ƒ∞', 'khabarovsk i',

            # –£–∫—Ä–∞–∏–Ω–∞
            'ukraine', 'ukraina', 'ukraine ƒ∞', 'ukraina ƒ∞', 'ukraine i', 'ukraina i',
            'kiev', 'kyiv', 'kiev ƒ∞', 'kyiv ƒ∞', 'kiev i', 'kyiv i',
            'kharkiv', 'kharkov', 'kharkiv ƒ∞', 'kharkiv i',
            'odessa', 'odesa', 'odessa ƒ∞', 'odessa i',
            'dnipro', 'dnepr', 'dnipro ƒ∞', 'dnipro i',
            'lviv', 'lviv ƒ∞', 'lviv i',

            # –ë–µ–ª–∞—Ä—É—Å—å
            'belarus', 'belarus ƒ∞', 'belarus i',
            'minsk', 'minsk ƒ∞', 'minsk i',
            'brest', 'brest ƒ∞', 'brest i',
            'grodno', 'grodno ƒ∞', 'grodno i',
            'gomel', 'gomel ƒ∞', 'gomel i',

            # –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω
            'kazakhstan', 'qazaqstan', 'kazakhstan ƒ∞', 'qazaq-stan', 'kazakhstan i',
            'almaty', 'alma-ata', 'almaty ƒ∞', 'almaty i',
            'astana', 'nur-sultan', 'astana ƒ∞', 'astana i',
            'shymkent', 'shymkent ƒ∞', 'shymkent i',
            'karaganda', 'karaganda ƒ∞', 'karaganda i',
            'aktobe', 'aktobe ƒ∞', 'aktobe i',
            'pavlodar', 'pavlodar ƒ∞', 'pavlodar i',

            # –ö—ã—Ä–≥—ã–∑—Å—Ç–∞–Ω
            'kyrgyzstan', 'kirgiziya', 'kyrgyzstan ƒ∞', 'kyrgyzstan i',
            'bishkek', 'bishkek ƒ∞', 'bishkek i',
            'osh', 'osh ƒ∞', 'osh i',

            # –¢–∞–¥–∂–∏–∫–∏—Å—Ç–∞–Ω
            'tajikistan', 'tojikiston', 'tajikistan ƒ∞', 'tajikistan i',
            'dushanbe', 'dushanbe ƒ∞', 'dushanbe i',
            'khujand', 'khujand ƒ∞', 'khujand i',

            # –¢—É—Ä–∫–º–µ–Ω–∏—Å—Ç–∞–Ω
            'turkmenistan', 'turkmenistan ƒ∞', 'turkmenistan i',
            'ashgabat', 'ashgabat ƒ∞', 'ashgabat i',
            'turkmenbashy', 'turkmenbashy ƒ∞', 'turkmenbashy i',

            # –¢—É—Ä—Ü–∏—è
            'turkey', 'turkiya', 'turkey ƒ∞', 'turkiya ƒ∞', 'turkey i', 'turkiya i',
            'istanbul', 'stambul', 'istanbul ƒ∞', 'stambul ƒ∞', 'istanbul i', 'stambul i',
            'ankara', 'ankara ƒ∞', 'ankara i',
            'izmir', 'izmir ƒ∞', 'izmir i',
            'antalya', 'antalya ƒ∞', 'antalya i',

            # –û–ê–≠
            'dubai', 'dubay', 'dubai ƒ∞', 'dubay ƒ∞', 'dubai i', 'dubay i',
            'abu dhabi', 'abu-dhabi', 'abu dhabi ƒ∞', 'abu dhabi i',

            # –ö–∏—Ç–∞–π
            'china', 'xitoy', 'china ƒ∞', 'xitoy ƒ∞', 'china i', 'xitoy i',
            'shanghai', 'shanghai ƒ∞', 'shanghai i',
            'beijing', 'pekin', 'beijing ƒ∞', 'beijing i',
            'guangzhou', 'guangzhou ƒ∞', 'guangzhou i',
            'shenzhen', 'shenzhen ƒ∞', 'shenzhen i',

            # –ö–æ—Ä–µ—è
            'korea', 'koreya', 'korea ƒ∞', 'koreya ƒ∞', 'korea i', 'koreya i',
            'seoul', 'seoul ƒ∞', 'seoul i',
            'busan', 'busan ƒ∞', 'busan i',

            # –ï–≤—Ä–æ–ø–∞
            'europe', 'yevropa', 'europe ƒ∞', 'yevropa ƒ∞', 'europe i', 'yevropa i',
            'germany', 'germaniya', 'germany ƒ∞', 'germaniya i',
            'berlin', 'berlin ƒ∞', 'berlin i',
            'hamburg', 'hamburg ƒ∞', 'hamburg i',
            'munich', 'munich ƒ∞', 'munich i',
            'frankfurt', 'frankfurt ƒ∞', 'frankfurt i',
            'warsaw', 'warsaw ƒ∞', 'warsaw i',
            'prague', 'prague ƒ∞', 'prague i',
            'budapest', 'budapest ƒ∞', 'budapest i',
            'vienna', 'vienna ƒ∞', 'vienna i',
            'rome', 'rome ƒ∞', 'rome i',
            'milan', 'milan ƒ∞', 'milan i',
            'paris', 'paris ƒ∞', 'paris i',
            'madrid', 'madrid ƒ∞', 'madrid i',
            'barcelona', 'barcelona ƒ∞', 'barcelona i',

            # –î—Ä—É–≥–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã
            'uzbekistan-germany', 'germany-uzbekistan', 'uzbekistan-poland', 'poland-uzbekistan'
        ]
    }
}

# ========== –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ==========
def init_logging():
    level = logging.DEBUG if os.getenv("DEBUG") else logging.INFO
    logging.basicConfig(level=level, format='[%(asctime)s] %(levelname)s: %(message)s')
logger = logging.getLogger(__name__)

message_count = 0
last_update_id = 0
bot_start_time = datetime.now()
bot_status = "–ê–ö–¢–ò–í–ï–ù"
stop_polling = False

def normalize_text(text: str) -> str:
    if not text:
        return ""
    # —Ç—É—Ä–µ—Ü–∫–∞—è ƒ∞‚ÜíI, ƒ±‚Üíi
    text = text.replace('\u0130', 'I').replace('\u0131', 'i')
    # NFC ‚Üí NFKD (–¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—è)
    text = unicodedata.normalize('NFKD', text)
    # —É–±–∏—Ä–∞–µ–º –¥–∏–∞–∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∑–Ω–∞–∫–∏
    text = ''.join(ch for ch in text if unicodedata.category(ch) != 'Mn')
    # –∞–ø–æ—Å—Ç—Ä–æ—Ñ—ã/–¥–µ—Ñ–∏—Å—ã ‚Üí –ø—Ä–æ—Å—Ç–æ '
    text = re.sub(r"[ º''‚Äì‚Äî\-]+", "'", text)
    return text.lower().strip()

def send_message(chat_id, text, message_thread_id=None, reply_markup=None):
    global message_count
    if not BOT_TOKEN:
        return False
    try:
        data = {
            'chat_id': chat_id,
            'text': text,
            'parse_mode': 'HTML'
        }
        if message_thread_id is not None:
            data['message_thread_id'] = int(message_thread_id)
        if reply_markup is not None:
            data['reply_markup'] = reply_markup
        resp = requests.post(f"{API_URL}/sendMessage", json=data, timeout=10)
        if resp.json().get('ok'):
            message_count += 1
            return True
        return False
    except Exception:
        return False

def author_button(sender: dict) -> dict:
    uid = sender["id"]
    url = f"https://t.me/{BOT_USERNAME}?start=user_{uid}"
    return {
        "inline_keyboard": [[{"text": "üë§ Aloqaga_chiqish", "url": url}]]
    }

def handle_admin_command(message):
    text = (message.get('text') or '').lower()
    chat_id = message['chat']['id']
    if message['from']['id'] != ADMIN_USER_ID:
        return
    if text in ('/start', '—Å—Ç–∞—Ä—Ç', '/status', '—Å—Ç–∞—Ç—É—Å'):
        uptime = datetime.now() - bot_start_time
        h, m = divmod(int(uptime.total_seconds() // 60), 60)
        send_message(chat_id, f"ü§ñ –ê–∫—Ç–∏–≤–µ–Ω. –°–æ–æ–±—â–µ–Ω–∏–π: {message_count}. Uptime {h}—á {m}–º")

PHONE_REGEX = re.compile(
    r'(?:(?:\+?998|998)?[\s\-]?)?(?:\(?\d{2}\)?[\s\-]?){4}\d{2}'
)
ROUTE_REGEX = re.compile(
    r'(?:üá∫üáø\s*([A-Za-z\u0130\u0131\'\w\-]+(?:\s+\([A-Za-z\u0130\u0131\'\w\-]+\))?)\s*\nüá∫üáø\s*([A-Za-z\u0130\u0131\'\w\-]+(?:\s+\([A-Za-z\u0130\u0131\'\w\-]+\))?)'
    r'|[–ú–º]–∞—Ä—à—Ä—É—Ç:\s*([A-Za-z\u0130\u0131\'\w\-]+(?:\s+\([A-Za-z\u0130\u0131\'\w\-]+\))?)\s*[-‚Äì‚Äî‚Üí‚ûØ]{1,3}\s*([A-Za-z\u0130\u0131\'\w\-]+(?:\s+\([A-Za-z\u0130\u0131\'\w\-]+\))?)'
    r'|([A-Za-z\u0130\u0131\'\w\-]+(?:\s+\([A-Za-z\u0130\u0131\'\w\-]+\))?)\s*[-‚Äì‚Äî‚Üí‚ûØ]{1,3}\s*([A-Za-z\u0130\u0131\'\w\-]+(?:\s+\([A-Za-z\u0130\u0131\'\w\-]+\))?)'
    r'|([A-Za-z\u0130\u0131\'\w\-]+)\s+(NAMANGANGA|TOSHKENT|ANDIJONGA|SURXONDARYOGA|QASHQADARYOGA|SAMARQANDGA|BUXOROGA|FARG ºONAGA|ANDIJONGA|SIRDARYOGA|JIZZAXGA|XORAZMGA|NAVOIYGA|QORAQALPOQSTONGA))',
    re.IGNORECASE
)

def extract_phone_number(text):
    m = PHONE_REGEX.search(text)
    return m.group().strip() if m else "–¢–µ–ª–µ—Ñ–æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω"

def extract_route_and_cargo(text: str):
    clean = re.sub(r'^[‚ùóÔ∏è‚ö†Ô∏è!#\s]+', '', text, flags=re.MULTILINE)
    matches = ROUTE_REGEX.findall(clean)
    if not matches:
        return None, None, text

    # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—É—é —É—Å–ø–µ—à–Ω—É—é –ø–∞—Ä—É
    for a, b in matches:
        if a and b:
            fr = a.strip()
            to = b.strip()
            # –£–¥–∞–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è
            cargo = re.sub(ROUTE_REGEX, '', clean).strip()
            return fr.lower(), to.lower(), cargo
    return None, None, text

    # –£–¥–∞–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
    cargo = clean
    for m in matches:
        cargo = cargo.replace(''.join(m), '').strip()

    return fr.lower(), to.lower(), cargo
def format_cargo_text(cargo_text):
    keywords = [
        '—Ñ—É—Ä–∞', 'fura', 'isuzu', 'kamaz', 'man', 'daf', 'scania', 'volvo',
        '—Ç–µ–Ω—Ç', '–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä', '—Ä–µ—Ñ', 'ref', 'refrigerator', 'chakman', '—á–∞–∫–º–∞–Ω'
    ]
    text = cargo_text.lower()
    match = re.search('|'.join(keywords), text)
    transport = match.group(0).title() if match else "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç"
    clean_desc = re.sub('|'.join(keywords), '', text, flags=re.I).strip()
    desc = clean_desc or "‚Äî"
    return transport, desc

def ask_admin_topic(message, from_city, to_city):
    text = message.get('text', '')
    user = message.get('from', {})
    user_data = f"{user.get('id')}:{user.get('first_name', '')}:{user.get('username', '')}"
    safe_data = f"{text}|||{user_data}".replace(":", "%3A")
    kb = [
        [{"text": k.upper(), "callback_data": f"route:{k}:{safe_data}"}]
        for k in REGION_KEYWORDS
    ]
    kb.append([{"text": "‚ùå –û—Ç–º–µ–Ω–∞", "callback_data": "route:cancel"}])
    requests.post(f"{API_URL}/sendMessage", json={
        "chat_id": ADMIN_USER_ID,
        "text": f"‚ö†Ô∏è –ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç:\n{from_city} ‚Üí {to_city}",
        "reply_markup": {"inline_keyboard": kb}
    }, timeout=10)

def process_message(message):
    global last_update_id
    try:
        text = message.get('text', '')
        chat_id = message['chat']['id']
        user_id = message['from']['id']
        if chat_id == ADMIN_USER_ID:
            handle_admin_command(message)
            return
        if chat_id != MAIN_GROUP_ID:
            return
        from_city, to_city, cargo_text = extract_route_and_cargo(text)
        if not from_city or not to_city:
            return

        def find_region(txt):
            txt_norm = normalize_text(txt)
            words = re.findall(r"\b\w+\b", txt_norm)
            for key, data in REGION_KEYWORDS.items():
                for kw in data['keywords']:
                    kw_norm = normalize_text(kw)
                    if kw_norm in words or (len(kw_norm) > 4 and kw_norm in txt_norm):
                        return key
            return None

        from_reg = find_region(from_city)
        if from_reg is None:
            ask_admin_topic(message, from_city, to_city)
            return

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–æ–ø–∏–∫ –ø–æ –º–µ—Å—Ç—É –û–¢–ü–†–ê–í–ö–ò
        topic_key = 'xalqaro' if 'xalqaro' == from_reg else from_reg
        topic_id = REGION_KEYWORDS[topic_key]['topic_id']

        sender = message.get('from', {})
        phone = extract_phone_number(text)
        transport, desc = format_cargo_text(cargo_text)

        msg = f"""{from_city.upper()} - {to_city.upper()}
üöõ {transport}
üí¨ {desc}
‚òéÔ∏è {phone}
#{to_city.upper()}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–î—Ä—É–≥–∏–µ –≥—Ä—É–∑—ã: @logistika_marka"""

        send_message(MAIN_GROUP_ID, msg, topic_id,
                     reply_markup=author_button(sender))
    except Exception:
        logging.exception("process_message error")

def handle_callback(update):
    try:
        query = update['callback_query']
        data = query['data']
        user_id = query['from']['id']
        if user_id != ADMIN_USER_ID:
            return
        if not data.startswith("route:"):
            return

        parts = data.split(":", 2)
        action = parts[1]
        payload = parts[2].replace("%3A", ":")
        original_text, user_info = payload.split("|||", 1)
        uid, name, username = user_info.split(":", 2)

        if action == "cancel":
            requests.post(f"{API_URL}/answerCallbackQuery", json={
                "callback_query_id": query['id'],
                "text": "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
            })
            return

        from_city, to_city, cargo_text = extract_route_and_cargo(original_text)
        if not from_city or not to_city:
            requests.post(f"{API_URL}/answerCallbackQuery", json={
                "callback_query_id": query['id'],
                "text": "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –º–∞—Ä—à—Ä—É—Ç"
            })
            return

        topic_key = action
        topic_id = REGION_KEYWORDS[topic_key]['topic_id']

        phone = extract_phone_number(original_text)
        cargo_clean = re.sub(PHONE_REGEX, '', original_text).strip()
        cargo_clean = re.sub(ROUTE_REGEX, '', cargo_clean).strip()
        transport, desc = format_cargo_text(cargo_clean)

        msg = f"""{from_city.upper()} - {to_city.upper()}
üöõ {transport}
üí¨ {desc}
‚òéÔ∏è {phone}
#{to_city.upper()}
‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ
–î—Ä—É–≥–∏–µ –≥—Ä—É–∑—ã: @logistika_marka"""

        send_message(MAIN_GROUP_ID, msg, topic_id,
                     reply_markup=author_button({
                         "id": uid,
                         "first_name": name,
                         "username": username
                     }))

        requests.post(f"{API_URL}/answerCallbackQuery", json={
            "callback_query_id": query['id'],
            "text": f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —Ç–æ–ø–∏–∫ {topic_key}"
        })
    except Exception:
        logging.exception("callback error")

def get_updates():
    global last_update_id, stop_polling
    if not BOT_TOKEN or stop_polling:
        return []
    
    # –ê–í–¢–û–ù–û–ú–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: Retry –ª–æ–≥–∏–∫–∞
    for attempt in range(3):
        try:
            params = {'offset': last_update_id + 1, 'timeout': 30,
                      'allowed_updates': ['message', 'callback_query']}
            resp = requests.get(f"{API_URL}/getUpdates", params=params, timeout=35)
            if resp.status_code == 401:
                stop_polling = True
                return []
            data = resp.json()
            return data.get('result', []) if data.get('ok') else []
        except requests.exceptions.Timeout:
            logger.warning(f"‚è≥ –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3: –¢–∞–π–º–∞—É—Ç getUpdates")
            time.sleep(2)
        except Exception as e:
            logger.error(f"üö® –ü–æ–ø—ã—Ç–∫–∞ {attempt + 1}/3: {e}")
            if attempt == 2:
                return []
            time.sleep(5)
    return []

def bot_main_loop():
    global last_update_id, bot_status, message_count, stop_polling
    logger.info("ü§ñ –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –±–æ—Ç–∞ –∑–∞–ø—É—â–µ–Ω")
    
    # –ê–í–¢–û–ù–û–ú–ù–û–ï –£–õ–£–ß–®–ï–ù–ò–ï: Heartbeat
    last_heartbeat = time.time()
    max_errors = 5
    consecutive_errors = 0
    restart_count = 0
    
    while not stop_polling:
        try:
            # Heartbeat –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
            if time.time() - last_heartbeat > 60:
                logger.info("üíì Bot heartbeat - ready for messages")
                last_heartbeat = time.time()
            
            updates = get_updates()
            if not updates:
                time.sleep(1)
                continue
                
            for update in updates:
                try:
                    if 'message' in update:
                        process_message(update['message'])
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {message_count} ‚Üí —Ç–æ–ø–∏–∫ {update.get('message', {}).get('message_thread_id', 'None')}")
                        # –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
                        globals()['last_activity'] = datetime.now()
                    if 'callback_query' in update:
                        handle_callback(update)
                    last_update_id = max(last_update_id, update.get('update_id', 0))
                    consecutive_errors = 0  # –°–±—Ä–æ—Å –æ—à–∏–±–æ–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
                except Exception as e:
                    logger.error(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ update: {e}")
                    
        except Exception as e:
            consecutive_errors += 1
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ü–∏–∫–ª–∞ #{consecutive_errors}: {e}")
            
            if consecutive_errors >= max_errors:
                logger.critical("üÜò –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ - –∞–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫")
                restart_count += 1
                bot_status = "–ü–ï–†–ï–ó–ê–ü–£–°–ö"
                
                # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
                try:
                    requests.post(f"{API_URL}/sendMessage", json={
                        "chat_id": ADMIN_USER_ID,
                        "text": f"üîÑ –ê–≤—Ç–æ–ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ #{restart_count}\n–ü—Ä–∏—á–∏–Ω–∞: {e}"
                    }, timeout=5)
                except:
                    pass
                
                time.sleep(10)
                consecutive_errors = 0
                bot_status = "–ê–ö–¢–ò–í–ï–ù"
            else:
                bot_status = "–û–®–ò–ë–ö–ê"
                time.sleep(5)
                bot_status = "–ê–ö–¢–ò–í–ï–ù"
                
        time.sleep(1)

app = Flask(__name__)

@app.route('/')
def home():
    uptime = datetime.now() - bot_start_time
    h, m = divmod(int(uptime.total_seconds() // 60), 60)
    return f"<h1>YukMarkazi Bot ‚Äì {bot_status}</h1><p>–°–æ–æ–±—â–µ–Ω–∏–π: {message_count}</p><p>Uptime: {h}—á {m}–º</p>"

@app.route('/health')
def health():
    uptime_seconds = (datetime.now() - bot_start_time).total_seconds()
    last_activity = globals().get('last_activity', bot_start_time)
    last_activity_seconds = (datetime.now() - last_activity).total_seconds()
    
    is_healthy = last_activity_seconds < 600  # 10 –º–∏–Ω—É—Ç
    status_code = 200 if is_healthy else 503
    
    health_data = {
        "status": "healthy" if is_healthy else "unhealthy",
        "bot_status": bot_status,
        "uptime_seconds": int(uptime_seconds),
        "messages_processed": message_count,
        "last_activity_seconds_ago": int(last_activity_seconds),
        "timestamp": datetime.now().isoformat()
    }
    
    return health_data, status_code

@app.route('/telegram', methods=['POST'])
def telegram_webhook():
    try:
        update = request.get_json(force=True)
        if 'message' in update:
            process_message(update['message'])
        if 'callback_query' in update:
            handle_callback(update)
        return jsonify(ok=True), 200
    except Exception:
        logger.exception("Webhook error")
        return jsonify(ok=False), 500

# –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫ –±–æ—Ç–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
threading.Thread(target=bot_main_loop, daemon=True).start()

if __name__ == '__main__':
    init_logging()
    
    # Graceful shutdown
    def shutdown_handler(signum, frame):
        global stop_polling, bot_status
        stop_polling = True
        bot_status = "–û–°–¢–ê–ù–û–í–õ–ï–ù"
        logger.info("üõë Graceful shutdown")
        sys.exit(0)
    
    signal.signal(signal.SIGTERM, shutdown_handler)
    signal.signal(signal.SIGINT, shutdown_handler)
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–Ω–æ–º–Ω–æ–≥–æ –±–æ—Ç–∞
    threading.Thread(target=bot_main_loop, daemon=True).start()
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ
    try:
        requests.post(f"{API_URL}/sendMessage", json={
            "chat_id": ADMIN_USER_ID,
            "text": "üöÄ –ê–í–¢–û–ù–û–ú–ù–´–ô –ë–û–¢ v2.0\n\n‚úÖ –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π\n‚úÖ –ê–≤—Ç–æ–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ\n‚úÖ Heartbeat —Å–∏—Å—Ç–µ–º–∞\n\n–†–∞–±–æ—Ç–∞—é 24/7 –±–µ–∑ Replit Agent!"
        }, timeout=5)
    except:
        pass
    
    port = int(os.environ.get('PORT', 10000))
    app.run(host='0.0.0.0', port=port, debug=False)
